import json
import random
from vk_api import VkApi
from data.keyboard import *
from data.db_handler import LocationsDb
from vk_api.keyboard import VkKeyboard
from vk_api.longpoll import VkLongPoll, VkEventType


def select_best_location(lat1: float, lon1: float, array: list):
    new_array = []
    for name, lat, lon, address in array:
        new_array.append([(abs(lat1 - lat) + abs(lon1 - lon)) / 2, name, address])
    return sorted(new_array)[0]


class VkHandler:
    def __init__(self):
        with open("data/config.json", "r") as config_file:
            self.config = json.loads(config_file.read())
        with open("data/quotes.txt", encoding="utf-8") as txt:
            self.quotes = txt.read().split(";\n")
        self.vk_session = VkApi(token=self.config["token"])
        self.vk = self.vk_session.get_api()
        self.longpoll = VkLongPoll(self.vk_session)
        self.locate_db = LocationsDb()
        self.keyboards = {
            "–ù–∞—á–∞—Ç—å": main_inline_keyboard.get_keyboard(),
            "‚ú≥ –°–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏": bad_keyboard.get_keyboard(),
            "‚ú≥ –°–¥–∞—Ç—å –†–∞–∑–¥–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä": bad_keyboard.get_keyboard(),
            "‚ú≥ –°–¥–∞—Ç—å —Å—Ç–µ–∫–ª–æ": bad_keyboard.get_keyboard(),
            "‚ú≥ –°–¥–∞—Ç—å –º–∞–∫—É–ª–∞—Ç—É—Ä—É": bad_keyboard.get_keyboard(),
            "‚ú≥ –°–¥–∞—Ç—å –º–µ—Ç–∞–ª–ª": bad_keyboard.get_keyboard(),
            "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": main_inline_keyboard.get_keyboard(),
            "‚ú≥ –°–¥–∞—Ç—å –º—É—Å–æ—Ä": main_pass_keyboard.get_keyboard(),
            "‚ú≥ –≠–∫–æ - –Ω–æ–≤–æ—Å—Ç–∏": None,
            "‚ú≥ –ñ–∞–ª–æ–±–∞": None
        }
        self.messages = {
            "–ù–∞—á–∞—Ç—å": "–ü—Ä–∏–≤–µ—Ç!\nüèö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "‚ú≥ –°–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏": "üì© –û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
            "‚ú≥ –°–¥–∞—Ç—å –†–∞–∑–¥–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä": "üì© –û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
            "‚ú≥ –°–¥–∞—Ç—å —Å—Ç–µ–∫–ª–æ": "üì© –û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
            "‚ú≥ –°–¥–∞—Ç—å –º–∞–∫—É–ª–∞—Ç—É—Ä—É": "üì© –û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
            "‚ú≥ –°–¥–∞—Ç—å –º–µ—Ç–∞–ª–ª": "üì© –û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
            "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "üèö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "‚ú≥ –°–¥–∞—Ç—å –º—É—Å–æ—Ä": "‚Åâ –í–æ—Ç –∫–∞–∫–æ–π –º—É—Å–æ—Ä –º—ã –≤–∞–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Å–¥–∞—Ç—å",
            "‚ú≥ –≠–∫–æ - –Ω–æ–≤–æ—Å—Ç–∏": "üî• –†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏",
            "‚ú≥ –ñ–∞–ª–æ–±–∞": "–ñ–∞–ª–æ–±–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: '—Å—Å—ã–ª–∫–∞'"
        }
        self.functions = {
            "–ù–∞—á–∞—Ç—å": self.writer,
            "‚ú≥ –°–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏": self.writer,
            "‚ú≥ –°–¥–∞—Ç—å –†–∞–∑–¥–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä": self.writer,
            "‚ú≥ –°–¥–∞—Ç—å —Å—Ç–µ–∫–ª–æ": self.writer,
            "‚ú≥ –°–¥–∞—Ç—å –º–∞–∫—É–ª–∞—Ç—É—Ä—É": self.writer,
            "‚ú≥ –°–¥–∞—Ç—å –º–µ—Ç–∞–ª–ª": self.writer,
            "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": self.writer,
            "‚ú≥ –°–¥–∞—Ç—å –º—É—Å–æ—Ä": self.writer,
            "‚ú≥ –≠–∫–æ - –Ω–æ–≤–æ—Å—Ç–∏": self.writer,
            "‚ú≥ –ñ–∞–ª–æ–±–∞": self.writer
        }
        self.categories = {
            "‚ú≥ –°–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏": "batteries",
            "‚ú≥ –°–¥–∞—Ç—å –†–∞–∑–¥–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä": "waist",
            "‚ú≥ –°–¥–∞—Ç—å —Å—Ç–µ–∫–ª–æ": "glass",
            "‚ú≥ –°–¥–∞—Ç—å –º–∞–∫—É–ª–∞—Ç—É—Ä—É": "paper",
            "‚ú≥ –°–¥–∞—Ç—å –º–µ—Ç–∞–ª–ª": "metal",
        }

    def writer(self, user_id: str or int, message: str, keyboard: VkKeyboard or None) -> None:
        self.vk.messages.send(user_id=user_id,
                              message=message,
                              random_id=0,
                              keyboard=keyboard)

    def run(self) -> None:
        for event in self.longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    if event.text:
                        text = event.text
                    try:
                        result = self.vk_session.method("messages.getById", {"message_ids": [event.message_id],
                                                                             "group_id": 189072320})
                        geolocation = result["items"][0]["geo"]["coordinates"]
                        lat, lon = geolocation["latitude"], geolocation["longitude"]
                        best_lat_lon, name, address = select_best_location(lat, lon,
                                                                           self.locate_db.select_category(
                                                                               self.categories.get(text)))
                        self.writer(event.user_id,
                                    f"üè† –ê–¥—Ä–µ—Å: {address}\nüîé –ù–∞–∑–≤–∞–Ω–∏–µ "
                                    f"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {name}\n–ò –ø–æ–º–Ω–∏:\n{random.choice(self.quotes)}",
                                    main_keyboard.get_keyboard())
                        text = ""
                    except KeyError:
                        pass
                    try:
                        self.functions.get(text)(event.user_id, self.messages.get(text), self.keyboards.get(text))
                    except TypeError:
                        pass
